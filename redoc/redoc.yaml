openapi: 3.0.2
info:
 title: 'YaMDb API'
 version: ''
 description: |
   requests to API begin with `/api/v1/`

   # Description

   Project **YaMDb** collects user reviews for works. The works are divided into categories: "Books", "Movies", "Music".

     # User registration algorithm
     1. User sends a request with the `email` parameter to `/auth/email/`.
     2. **YaMDB** sends an email with a confirmation code (`confirmation_code`) to the `email` address.
     3. User sends a request with the parameters `email` and `confirmation_code` to `/auth/token/`, in response to the request she/he gets `token` (JWT-token).
     4. If desired, user sends PATCH-request to `/users/me/` and fills his profile fields (see description of fields in documentation).

     #User roles
     - **Anonymous** - can browse descriptions of works, read reviews and comments.
     - **Authenticated User** - can read everything, just like **Anonymous**, in addition she/he can post reviews and rate works (movies/books/songs), can comment other users' reviews and rate them; can edit and delete **her/his** reviews and comments.
     - **Moderator** - the same rights as **Authenticated User** plus the right to delete **any** reviews and comments.
     - **Administrator** - Full rights to manage the project and all its contents. Can create and delete categories and works. Can assign roles to users.
     - **Administrator Django** - the same rights as the **Administrator** role.

servers:
 - url: /api/v1/

tags:
 - name: REVIEWS
   description: Reviews
 - name: COMMENTS
   description: Comments to reviews
 - name: AUTH
   description: Authentification
 - name: USERS
   description: Users
 - name: CATEGORIES
   description: Categories (types) of works
 - name: GENRES
   description: Genres categories
 - name: TITLES
   description: Works for which reviews are written (a particular movie, book, or song).

paths:
 /titles/{title_id}/reviews/:
   parameters:
     - name: title_id
       in: path
       required: true
       description: ID of review object
       schema:
         type: number
   get:
     tags:
       - REVIEWS
     description: |
       Get a list of all reviews.

       Access rights: **Available without a token.
     responses:
       200:
         description: List of reviews, paginated
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   count:
                     type: number
                   next:
                     type: string
                   previous:
                     type: string
                   results:
                     type: array
                     items:
                       $ref: '#/components/schemas/Review'
       404:
         description: Review object not found
   post:
     tags:
       - REVIEWS
     description: |
       Create a new review. User can leave only one review for one object.

       Access rights: **Authenticated users.
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Review'
     responses:
       200:
         description: 'New review'
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Review'
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       404:
         description: Review object not found
     security:
     - jwt_auth:
       - write:user,moderator,admin
 /titles/{title_id}/reviews/{review_id}/:
   parameters:
     - name: title_id
       in: path
       required: true
       description: ID of review object
       schema:
         type: number
     - name: review_id
       in: path
       required: true
       description: Review ID
       schema:
         type: number
   get:
     tags:
       - REVIEWS
     description: |
       Get review by id.

       Access rights: **Available without token.
     responses:
       200:
         description: Review
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Review'
       404:
         description: Review object not found
   patch:
     tags:
       - REVIEWS
     description: |
       Partially update the review by id.

       Access rights: ** Review author, moderator or administrator.
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Review'
     responses:
       200:
         description: Review
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Review'
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Object not found
     security:
     - jwt_auth:
       - write:user,moderator,admin
   delete:
     tags:
       - REVIEWS
     description: |
       Delete feedback by id

       Permissions: ** Review author, moderator or administrator
     responses:
       204:
         description: ''
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Object not found
     security:
     - jwt_auth:
       - write:user,moderator,admin

 /titles/{title_id}/reviews/{review_id}/comments/:
   parameters:
     - name: title_id
       in: path
       required: true
       description: ID of reviewed object
       schema:
         type: number
     - name: review_id
       in: path
       required: true
       description: ID отзыва
       schema:
         type: number
   get:
     tags:
       - COMMENTS
     description: |
       Get a list of all review's comments by id

       Access rights: **Access without token.**
     responses:
       200:
         description: Paginated list of comments
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   count:
                     type: number
                   next:
                     type: string
                   previous:
                     type: string
                   results:
                     type: array
                     items:
                       $ref: '#/components/schemas/Comment'
       404:
         description: Object or review not found
   post:
     tags:
       - COMMENTS
     description: |
       Create a new Comment for feedback.

       Access rights: **Authenticated users.
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Comment'
     responses:
       200:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Comment'
         description: ''
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       404:
         description: Object not found или отзыв
     security:
     - jwt_auth:
       - write:user,moderator,admin

 /titles/{title_id}/reviews/{review_id}/comments/{comment_id}/:
   parameters:
     - name: title_id
       in: path
       required: true
       description: ID of reviewed object
       schema:
         type: number
     - name: review_id
       in: path
       required: true
       description: ID отзыва
       schema:
         type: number
     - name: comment_id
       in: path
       required: true
       description: Comment ID
       schema:
         type: number
   get:
     tags:
       - COMMENTS
     description: |
       Get comment of a review by id.

       Access rights: **Access without token.**
     responses:
       200:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Comment'
         description: ''
       404:
         description: Object not found, review or comment
   patch:
     tags:
       - COMMENTS
     description: |
       Partially update Comment to review by id.

       Access rights: **Author of comment, moderator or administrator**.
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Comment'
     responses:
       200:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Comment'
         description: ''
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Object not found, review or comment
     security:
     - jwt_auth:
       - write:user,moderator,admin
   delete:
     tags:
       - COMMENTS
     description: |
       Delete Comment to review by id.

       Access rights: **Author of comment, moderator or administrator**.
     responses:
       204:
         description: ''
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Object not found, review or comment
     security:
     - jwt_auth:
       - write:user,moderator,admin

 /auth/token/:
   post:
     tags:
       - AUTH
     description: Receiving JWT-Token in exchange for email and confirmation_code.
     requestBody:
       content:
         application/json:
           schema:
             required:
               - email
               - confirmation_code
             properties:
               email:
                 type: string
               confirmation_code:
                 type: string
                 writeOnly: true
     responses:
       200:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Token'
         description: ''
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
 /auth/email/:
   post:
     tags:
       - AUTH
     description: Sending confirmation_code to a received email.
     parameters: []
     requestBody:
       content:
         application/json:
           schema:
             required:
               - email
             properties:
               email:
                 type: string
     responses:
       200:
         content:
           application/json:
             schema:
               properties:
                 email:
                   type: string
               required:
               - email
         description: ''

 /users/:
   get:
     tags:
       - USERS
     description: |
       Get a list of all users.

        Access rights: **Administrator**
     parameters:
     - name: search
       in: query
       description: username of user for filtering, search by username
       schema:
         type: string
     responses:
       200:
         description: Paginated list of users
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   count:
                     type: number
                   next:
                     type: string
                   previous:
                     type: string
                   results:
                     type: array
                     items:
                       $ref: '#/components/schemas/User'
       401:
         description: JWT token is required
     security:
     - jwt_auth:
       - read:admin
       - write:admin
   post:
     tags:
       - USERS
     description: |
       Creating a user.

        Access rights: **Administrator**"
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
     responses:
       201:
         description: User created
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       403:
         description: Forbidden
     security:
     - jwt_auth:
       - read:admin
       - write:admin
 /users/{username}/:
   parameters:
     - name: username
       in: path
       required: true
       description: Username of user
       schema:
         type: string
   get:
     tags:
       - USERS
     description: |
       Get the user by username.

        Access rights: **Administrator**
     responses:
       200:
         description: User object
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: User not found
     security:
     - jwt_auth:
       - read:admin
       - write:admin
   patch:
     tags:
       - USERS
     description: |
       Change user data by username.

        Access rights: **Administrator.**
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
     responses:
       200:
         description: User
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
       400:
         description: Validation error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: User not found
     security:
     - jwt_auth:
       - read:admin
       - write:admin
   delete:
     tags:
       - USERS
     description: |
       Delete user by username.

        Access rights: **Administrator.**
     responses:
       204:
         description: User deleted
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: User not found
     security:
     - jwt_auth:
       - read:admin
       - write:admin

 /users/me/:
   get:
     tags:
       - USERS
     description: |
       Get your account information

        Access rights: **Any authorized user**
     responses:
       200:
         description: Object of account
         content:
           application/json:
             schema:
               type: object
               items:
                 $ref: '#/components/schemas/User'
     security:
     - jwt_auth:
       - read:admin,moderator,user
       - write:admin,moderator,user
   patch:
     tags:
       - USERS
     description: |
       Change your account information

        Access rights: **Any authorized user**
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/User'
     responses:
       200:
         description: User
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/User'
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
     security:
     - jwt_auth:
       - read:admin,moderator,user
       - write:admin,moderator,user

 /categories/:
   get:
     tags:
       - CATEGORIES
     description: |
       Get list of all categories

        Access rights: **Available without Token**
     parameters:
     - name: search
       in: query
       description: filters by category's name
       schema:
         type: string
     responses:
       200:
         description: Paginated list of categories
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   count:
                     type: number
                   next:
                     type: string
                   previous:
                     type: string
                   results:
                     type: array
                     items:
                       $ref: '#/components/schemas/Category'
   post:
     tags:
       - CATEGORIES
     description: |
       Create a category.

        Access rights: **Administrator.**
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Category'
     responses:
       200:
         description: Categories list
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Category'
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       403:
         description: Forbidden
     security:
     - jwt_auth:
       - read:admin
       - write:admin
 /categories/{slug}/:
   delete:
     tags:
       - CATEGORIES
     description: |
       Delete category.

       Access rights: **Administrator.**
     parameters:
     - name: slug
       in: path
       required: true
       description: Slug of category
       schema:
         type: string
     responses:
       204:
         description: ''
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Category not found
     security:
     - jwt_auth:
       - read:admin
       - write:admin

 /titles/:
   get:
     tags:
       - TITLES
     description: |
       Get a list of all objects


        Access rights: **Available without Token**
     parameters:
       - name: category
         in: query
         description: filters by slug of category
         schema:
           type: string
       - name: genre
         in: query
         description: filters by slug of genre
         schema:
           type: string
       - name: name
         in: query
         description: filters by object's name
         schema:
           type: string
       - name: year
         in: query
         description: filters by year
         schema:
           type: number
     responses:
       200:
         description: Paginated list of objects
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   count:
                     type: number
                   next:
                     type: string
                   previous:
                     type: string
                   results:
                     type: array
                     items:
                       $ref: '#/components/schemas/Title'
   post:
     tags:
       - TITLES
     description: |
       Create a work for review.

        Access rights: **Administrator**.
     parameters: []
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/TitleCreate'
     responses:
       200:
         description: List of objects
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Title'
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       403:
         description: Forbidden
     security:
     - jwt_auth:
       - read:admin
       - write:admin
 /titles/{titles_id}/:
   parameters:
     - name: titles_id
       in: path
       required: true
       description: ID объекта
       schema:
         type: number
   get:
     tags:
       - TITLES
     description: |
       Information about object


       Access rights: **Available without Token**
     responses:
       200:
         description: Object
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Title'
       404:
         description: Object not found
   patch:
     tags:
       - TITLES
     description: |
       Update information about object


       Access rights: **Administrator**.
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/TitleCreate'
     responses:
       200:
         description: Object
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Title'
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Object not found
     security:
     - jwt_auth:
       - read:admin
       - write:admin
   delete:
     tags:
       - TITLES
     description: |
       Delete title

       Access rights: **Administrator**.
     responses:
       204:
         description: ''
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Object not found
     security:
     - jwt_auth:
       - read:admin
       - write:admin

 /genres/:
   get:
     tags:
       - GENRES
     description: |
       Get list of all genres

       Access rights: **Available without Token**
     parameters:
     - name: search
       in: query
       description: filter by genre name
       schema:
         type: string
     responses:
       200:
         description: Paginated list of genres
         content:
           application/json:
             schema:
               type: array
               items:
                 type: object
                 properties:
                   count:
                     type: number
                   next:
                     type: string
                   previous:
                     type: string
                   results:
                     type: array
                     items:
                       $ref: '#/components/schemas/Genre'
   post:
     tags:
       - GENRES
     description: |
       Create genre.

       Access rights: **Administrator**.
     responses:
       200:
         description: Genre's list
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Genre'
       400:
         description: Error
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/ValidationError'
       401:
         description: JWT token is required
       403:
         description: Forbidden
     security:
     - jwt_auth:
       - read:admin
       - write:admin

 /genres/{slug}/:
   delete:
     tags:
       - GENRES
     description: |
       Delete genre

       Access rights: **Administrator**.
     parameters:
     - name: slug
       in: path
       required: true
       description: Slug of genre
       schema:
         type: string
     responses:
       204:
         description: ''
       401:
         description: JWT token is required
       403:
         description: Forbidden
       404:
         description: Genre not found
     security:
     - auth:
       - read:admin
       - write:admin

components:
 schemas:
   User:
     title: User
     type: object
     description: Detailed information about user
     required:
         - username
         - email
     properties:
       first_name:
         type: string
         title: Name
       last_name:
         type: string
         title: Last name
       username:
         type: string
         title: Username
       bio:
         type: string
         title: Bio
       email:
         type: string
         title: Email
       role:
         type: string
         description: Administrator, moderator or user. By default `user`.
         enum:
           - user
           - moderator
           - admin

   Title:
     title: Object
     type: object
     required:
       - name
     properties:
       id:
         type: integer
         title: Title ID
         readOnly: true
       name:
         type: string
         title: Name
       year:
         type: number
         title: Year
       rating:
         type: number
         readOnly: True
         title: Rating based on reviews, if there are no reviews — `None`
       description:
         type: string
         title: Description
       genre:
         type: array
         items:
           $ref: '#/components/schemas/Genre'
       category:
         $ref: '#/components/schemas/Category'
   TitleCreate:
     title: Object for change
     type: object
     required:
       - name
     properties:
       name:
         type: string
         title: Name
       year:
         type: number
         title: Year
       description:
         type: string
         title: Description
       genre:
         type: array
         items:
           type: string
           title: Genre slug
       category:
         type: string
         title: Category slug

   Genre:
     title: Genre
     type: object
     required:
       - name
     properties:
       name:
         type: string
         title: Genre name
       slug:
         type: string
         title: Field "slug"

   Review:
     title: Review
     type: object
     description: Detailed information about review
     required:
         - text
         - score
     properties:
       id:
         type: integer
         title: Review ID
         readOnly: true
       text:
         type: string
         title: Review text
       author:
         type: string
         title: user's username
         readOnly: true
       score:
         type: integer
         title: Score
         minimum: 1
         maximum: 10
       pub_date:
         type: string
         format: date-time
         title: Publication date of review
         readOnly: true

   ValidationError:
     title: Validation error
     type: object
     properties:
       field_name:
         type: array
         items:
           type: string

   Token:
     title: Token
     type: object
     properties:
       token:
         type: string
         title: access Token

   Comment:
     title: Comment
     type: object
     description: Detailed information about comment
     required:
       - text
     properties:
       id:
         type: integer
         title: Comment ID
         readOnly: true
       text:
         type: string
         title: Comment's text
       author:
         type: string
         title: username of comment's author
         readOnly: true
       pub_date:
         type: string
         format: date-time
         title: Publication date of comment
         readOnly: true

   Category:
     title: Category
     type: object
     required:
       - name
     properties:
       name:
         type: string
         title: Name of object's category
       slug:
         type: string
         title: Field slug

 securitySchemes:
   jwt_auth:
     type: apiKey
     name: Bearer
     in: header
